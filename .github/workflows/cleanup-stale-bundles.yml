name: Cleanup Stale Branch Bundles

on:
  # Run when a branch is deleted
  delete:

  # Also run weekly to clean up any missed bundles
  schedule:
    - cron: '0 2 * * 0'  # Every Sunday at 2 AM UTC

  # Manual trigger
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Specific branch bundle to cleanup (optional)'
        required: false
        type: string

jobs:
  cleanup:
    name: Remove Stale Bundle Deployments
    runs-on: ubuntu-latest
    if: github.event_name == 'delete' && github.event.ref_type == 'branch' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    env:
      DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
      DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Databricks CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh

      - name: Determine branch to cleanup
        id: branch
        run: |
          if [[ "${{ github.event_name }}" == "delete" ]]; then
            # Branch was deleted via webhook
            BRANCH_NAME="${{ github.event.ref }}"
          elif [[ -n "${{ inputs.branch_name }}" ]]; then
            # Manual trigger with specific branch
            BRANCH_NAME="${{ inputs.branch_name }}"
          else
            # Scheduled run - will cleanup all stale branches
            BRANCH_NAME=""
          fi

          # Sanitize branch name (same logic as CI)
          if [[ -n "$BRANCH_NAME" ]]; then
            SANITIZED=$(echo "$BRANCH_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | cut -c1-30)
            echo "branch_suffix=-${SANITIZED}" >> $GITHUB_OUTPUT
            echo "Cleaning up bundle for branch: $BRANCH_NAME (suffix: -${SANITIZED})"
          else
            echo "branch_suffix=" >> $GITHUB_OUTPUT
            echo "Scheduled cleanup - will check for stale bundles"
          fi

      - name: List all bundles
        id: list_bundles
        run: |
          # List all workspace paths to find feature branch bundles
          echo "Listing deployed bundles..."
          databricks workspace list /Workspace/ --output json > bundles.json || true

          # Display bundles
          if [ -f bundles.json ]; then
            cat bundles.json | jq -r '.[] | select(.path | contains("mlops-production-pipeline-")) | .path'
          fi

      - name: Cleanup specific branch bundle
        if: steps.branch.outputs.branch_suffix != ''
        run: |
          BUNDLE_SUFFIX="${{ steps.branch.outputs.branch_suffix }}"
          BUNDLE_NAME="mlops-production-pipeline${BUNDLE_SUFFIX}"

          echo "Attempting to destroy bundle: $BUNDLE_NAME"

          # Set environment variables for bundle
          export TF_VAR_branch_suffix="${BUNDLE_SUFFIX}"
          export TF_VAR_workspace_host="${DATABRICKS_HOST}"

          # Destroy the bundle deployment
          databricks bundle destroy --target dev --auto-approve || echo "Bundle may not exist or already destroyed"

          echo "Cleanup completed for $BUNDLE_NAME"

      - name: Cleanup stale bundles (scheduled)
        if: github.event_name == 'schedule' && steps.branch.outputs.branch_suffix == ''
        run: |
          echo "Checking for stale feature branch bundles..."

          # Get list of active branches
          git fetch --all
          ACTIVE_BRANCHES=$(git branch -r | sed 's/origin\///' | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g')

          echo "Active branches: $ACTIVE_BRANCHES"

          # List deployed bundles and check against active branches
          # This is a placeholder - in production, you'd query Databricks API
          # to list deployed bundles and compare against active branches

          echo "Stale bundle cleanup requires manual review or custom script"
          echo "Consider implementing Databricks API calls to list and destroy old bundles"

      - name: Cleanup summary
        if: always()
        run: |
          echo "=== Cleanup Summary ==="
          echo "Event: ${{ github.event_name }}"
          echo "Branch suffix: ${{ steps.branch.outputs.branch_suffix }}"
          echo "======================="
