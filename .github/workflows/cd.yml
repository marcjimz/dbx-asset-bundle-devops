name: CD Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - stg
          - prod

env:
  PYTHON_VERSION: '3.10'

jobs:
  # ============================================================================
  # PRE-DEPLOYMENT: Security & Quality Checks (Release Lineage)
  # ============================================================================
  # Re-run all CI checks as part of release process for audit trail
  # Ensures release artifacts meet security and quality standards
  # ============================================================================

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          pip install bandit safety pip-audit

      - name: Run Bandit security scan
        run: |
          bandit -r src/ -c pyproject.toml -f json -o bandit-report.json || true
          bandit -r src/ -c pyproject.toml -f txt

      - name: Run Safety check (known vulnerabilities)
        run: |
          pip install -r requirements.txt
          safety check --json || true
          safety check

      - name: Run pip-audit
        run: |
          pip-audit --requirement requirements.txt || true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: release-bandit-security-report
          path: bandit-report.json

  secret-scan:
    name: Secret & Credential Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install detect-secrets
        run: |
          pip install detect-secrets

      - name: Run detect-secrets scan
        run: |
          detect-secrets scan --all-files --force-use-all-plugins \
            --exclude-files '\.git/.*' \
            --exclude-files '\.pytest_cache/.*' \
            --exclude-files '__pycache__/.*' > .secrets.baseline || true

      - name: TruffleHog OSS Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ""
          head: HEAD
          extra_args: --only-verified
        continue-on-error: true

      - name: Upload secrets baseline
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: release-secrets-baseline
          path: .secrets.baseline

  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pylint

      - name: Run Black format check
        run: |
          black --check src/ tests/

      - name: Run Flake8
        run: |
          flake8 src/ tests/ --max-line-length=100 --exclude=__pycache__

      - name: Run Pylint
        run: |
          pylint src/ --disable=C0114,C0115,C0116 || true

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [security-scan, secret-scan, code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run unit tests with coverage
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term --cov-fail-under=10

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: release-coverage-report
          path: |
            coverage.xml
            htmlcov/

  # Validate release tag format
  validate-release:
    name: Validate Release Tag
    runs-on: ubuntu-latest
    needs: [security-scan, secret-scan, code-quality, unit-tests]
    if: startsWith(github.ref, 'refs/tags/')
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "version=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "Release version: ${TAG_NAME}"

          # Validate semver format
          if [[ ! $TAG_NAME =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Tag must follow semantic versioning (v*.*.*))"
            exit 1
          fi

      - name: Release Quality Summary
        run: |
          echo "=========================================="
          echo "Release Quality Gate Passed"
          echo "=========================================="
          echo "Version: ${GITHUB_REF#refs/tags/}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Secret Scan: ${{ needs.secret-scan.result }}"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "=========================================="
          echo "✅ All quality checks passed"
          echo "Proceeding with deployment..."

  # ============================================================================
  # DEPLOYMENT PHASE
  # ============================================================================

  # Deploy to DEV environment
  deploy-dev:
    name: Deploy to DEV
    runs-on: ubuntu-latest
    needs: [security-scan, secret-scan, code-quality, unit-tests, validate-release]
    if: always() && (needs.validate-release.result == 'success' || github.event_name == 'workflow_dispatch')
    environment:
      name: development
      url: https://adb-example.cloud.databricks.com
    outputs:
      deployment_status: ${{ steps.deploy.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh

      - name: Configure Databricks CLI
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_DEV_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_DEV_TOKEN }}
        run: |
          # Create .databrickscfg for authentication
          cat > ~/.databrickscfg << EOF
          [DEFAULT]
          host = ${{ secrets.DATABRICKS_DEV_HOST }}
          token = ${{ secrets.DATABRICKS_DEV_TOKEN }}
          EOF

          chmod 600 ~/.databrickscfg
          echo "✅ Databricks CLI configured for DEV"

      - name: Validate bundle
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_DEV_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_DEV_TOKEN }}
        run: |
          databricks bundle validate -t dev
          echo "✅ Bundle validation successful"

      # ============================================================================
      # AUTHENTICATION TEST ONLY - DEPLOYMENT DISABLED
      # ============================================================================
      # TODO: Once bundle is fully tested, uncomment the deployment steps below
      # For now, we only authenticate and validate to ensure credentials work
      # ============================================================================
      - name: Test DEV Authentication (Deploy Disabled)
        id: deploy
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_DEV_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_DEV_TOKEN }}
        run: |
          echo "🔐 Testing authentication to DEV workspace..."
          databricks workspace list /Workspace --output json > /dev/null
          echo "✅ Authentication successful - credentials are valid"
          echo "⚠️  DEPLOYMENT SKIPPED - Bundle not yet tested"
          echo "📝 To enable deployment, uncomment the 'databricks bundle deploy' command"
          echo "status=auth-only" >> $GITHUB_OUTPUT

      # DISABLED: Uncomment when ready to deploy
      # - name: Deploy to DEV
      #   id: deploy
      #   env:
      #     DATABRICKS_HOST: ${{ secrets.DATABRICKS_DEV_HOST }}
      #     DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_DEV_TOKEN }}
      #   run: |
      #     databricks bundle deploy -t dev
      #     echo "status=success" >> $GITHUB_OUTPUT

      # DISABLED: Uncomment when ready to run jobs
      # - name: Run training job
      #   env:
      #     DATABRICKS_HOST: ${{ secrets.DATABRICKS_DEV_HOST }}
      #     DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_DEV_TOKEN }}
      #   run: |
      #     echo "Triggering training job in DEV..."
      #     databricks bundle run training_job -t dev --no-wait
      #     echo "Training job started in DEV environment"

  # Deploy to STG environment
  deploy-stg:
    name: Deploy to STG
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: success()
    environment:
      name: staging
      url: https://adb-example.cloud.databricks.com
    outputs:
      deployment_status: ${{ steps.deploy.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh

      - name: Configure Databricks CLI
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_STG_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_STG_TOKEN }}
        run: |
          # Create .databrickscfg for authentication
          cat > ~/.databrickscfg << EOF
          [DEFAULT]
          host = ${{ secrets.DATABRICKS_STG_HOST }}
          token = ${{ secrets.DATABRICKS_STG_TOKEN }}
          EOF

          chmod 600 ~/.databrickscfg
          echo "✅ Databricks CLI configured for STG"

      - name: Validate bundle
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_STG_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_STG_TOKEN }}
        run: |
          databricks bundle validate -t stg
          echo "✅ Bundle validation successful"

      # ============================================================================
      # AUTHENTICATION TEST ONLY - DEPLOYMENT DISABLED
      # ============================================================================
      # TODO: Once bundle is fully tested, uncomment the deployment steps below
      # For now, we only authenticate and validate to ensure credentials work
      # ============================================================================
      - name: Test STG Authentication (Deploy Disabled)
        id: deploy
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_STG_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_STG_TOKEN }}
        run: |
          echo "🔐 Testing authentication to STG workspace..."
          databricks workspace list /Workspace --output json > /dev/null
          echo "✅ Authentication successful - credentials are valid"
          echo "⚠️  DEPLOYMENT SKIPPED - Bundle not yet tested"
          echo "📝 To enable deployment, uncomment the 'databricks bundle deploy' command"
          echo "status=auth-only" >> $GITHUB_OUTPUT

      # DISABLED: Uncomment when ready to deploy
      # - name: Deploy to STG
      #   id: deploy
      #   env:
      #     DATABRICKS_HOST: ${{ secrets.DATABRICKS_STG_HOST }}
      #     DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_STG_TOKEN }}
      #   run: |
      #     databricks bundle deploy -t stg
      #     echo "status=success" >> $GITHUB_OUTPUT

      # ============================================================================
      # INTEGRATION TESTS - STAGING ENVIRONMENT
      # ============================================================================
      # TODO: Implement integration tests for staging environment
      # These tests should verify end-to-end functionality after deployment
      # ============================================================================

      # DISABLED: Uncomment and implement when ready
      # - name: Run Integration Tests (Staging)
      #   env:
      #     DATABRICKS_HOST: ${{ secrets.DATABRICKS_STG_HOST }}
      #     DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_STG_TOKEN }}
      #   run: |
      #     echo "=========================================="
      #     echo "Integration Tests - Staging Environment"
      #     echo "=========================================="
      #
      #     # TODO: Implement the following integration tests:
      #     # 1. Verify jobs are deployed correctly
      #     # 2. Test job execution and outputs
      #     # 3. Validate model registration
      #     # 4. Check Unity Catalog permissions
      #     # 5. Verify MLflow experiment tracking
      #     # 6. Test data pipeline end-to-end
      #
      #     # Example structure (uncomment and implement):
      #     # pytest tests/integration/ -v --tb=short \
      #     #   --env=staging \
      #     #   --host="${DATABRICKS_HOST}" \
      #     #   --token="${DATABRICKS_TOKEN}"
      #
      #     echo "⚠️  Integration tests not yet implemented"
      #     echo "See tests/integration/README.md for implementation guide"

      # DISABLED: Uncomment when ready to run pipeline
      # - name: Run full pipeline
      #   env:
      #     DATABRICKS_HOST: ${{ secrets.DATABRICKS_STG_HOST }}
      #     DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_STG_TOKEN }}
      #   run: |
      #     echo "Triggering full MLOps pipeline in STG..."
      #     databricks bundle run full_pipeline_job -t stg --no-wait
      #     echo "Full pipeline started in STG environment"

  # Deploy to PROD environment
  deploy-prod:
    name: Deploy to PROD
    runs-on: ubuntu-latest
    needs: deploy-stg
    if: success()
    environment:
      name: production
      url: https://adb-example.cloud.databricks.com
    outputs:
      deployment_status: ${{ steps.deploy.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh

      - name: Configure Databricks CLI
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_PROD_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_PROD_TOKEN }}
        run: |
          # Create .databrickscfg for authentication
          cat > ~/.databrickscfg << EOF
          [DEFAULT]
          host = ${{ secrets.DATABRICKS_PROD_HOST }}
          token = ${{ secrets.DATABRICKS_PROD_TOKEN }}
          EOF

          chmod 600 ~/.databrickscfg
          echo "✅ Databricks CLI configured for PROD"

      - name: Validate bundle
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_PROD_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_PROD_TOKEN }}
        run: |
          databricks bundle validate -t prod
          echo "✅ Bundle validation successful"

      # ============================================================================
      # AUTHENTICATION TEST ONLY - DEPLOYMENT DISABLED
      # ============================================================================
      # TODO: Once bundle is fully tested, uncomment the deployment steps below
      # For now, we only authenticate and validate to ensure credentials work
      # ============================================================================
      - name: Test PROD Authentication (Deploy Disabled)
        id: deploy
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_PROD_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_PROD_TOKEN }}
        run: |
          echo "🔐 Testing authentication to PROD workspace..."
          databricks workspace list /Workspace --output json > /dev/null
          echo "✅ Authentication successful - credentials are valid"
          echo "⚠️  DEPLOYMENT SKIPPED - Bundle not yet tested"
          echo "📝 To enable deployment, uncomment the 'databricks bundle deploy' command"
          echo "status=auth-only" >> $GITHUB_OUTPUT

      # DISABLED: Uncomment when ready to deploy
      # - name: Deploy to PROD
      #   id: deploy
      #   env:
      #     DATABRICKS_HOST: ${{ secrets.DATABRICKS_PROD_HOST }}
      #     DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_PROD_TOKEN }}
      #   run: |
      #     databricks bundle deploy -t prod
      #     echo "status=success" >> $GITHUB_OUTPUT

      # DISABLED: Uncomment when ready to run smoke tests
      # - name: Run smoke tests
      #   run: |
      #     echo "Running smoke tests in PROD..."
      #     pytest tests/integration/ -v -m smoke --tb=short || true
      #     echo "Smoke tests completed"

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Deployment summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-stg, deploy-prod]
    if: always()
    steps:
      - name: Check deployment statuses
        run: |
          echo "Deployment Summary"
          echo "=================="
          echo "DEV:  ${{ needs.deploy-dev.result }}"
          echo "STG:  ${{ needs.deploy-stg.result }}"
          echo "PROD: ${{ needs.deploy-prod.result }}"

          # Check if any deployment failed
          if [[ "${{ needs.deploy-dev.result }}" == "failure" ]] || \
             [[ "${{ needs.deploy-stg.result }}" == "failure" ]] || \
             [[ "${{ needs.deploy-prod.result }}" == "failure" ]]; then
            echo "One or more deployments failed"
            exit 1
          fi

          echo "All deployments completed successfully"
