name: CD Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - stg
          - prod

env:
  PYTHON_VERSION: '3.10'

jobs:
  # Validate release tag format
  validate-release:
    name: Validate Release Tag
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "version=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "Release version: ${TAG_NAME}"

          # Validate semver format
          if [[ ! $TAG_NAME =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Tag must follow semantic versioning (v*.*.*))"
            exit 1
          fi

  # Deploy to DEV environment
  deploy-dev:
    name: Deploy to DEV
    runs-on: ubuntu-latest
    needs: validate-release
    if: always() && (needs.validate-release.result == 'success' || github.event_name == 'workflow_dispatch')
    environment:
      name: development
      url: https://adb-example.cloud.databricks.com
    outputs:
      deployment_status: ${{ steps.deploy.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh

      - name: Configure Databricks CLI
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_DEV_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_DEV_TOKEN }}
        run: |
          # Create .databrickscfg for authentication
          cat > ~/.databrickscfg << EOF
          [DEFAULT]
          host = ${{ secrets.DATABRICKS_DEV_HOST }}
          token = ${{ secrets.DATABRICKS_DEV_TOKEN }}
          EOF

          chmod 600 ~/.databrickscfg
          echo "✅ Databricks CLI configured for DEV"

      - name: Validate bundle
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_DEV_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_DEV_TOKEN }}
        run: |
          databricks bundle validate -t dev

      - name: Deploy to DEV
        id: deploy
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_DEV_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_DEV_TOKEN }}
        run: |
          databricks bundle deploy -t dev
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Run training job
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_DEV_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_DEV_TOKEN }}
        run: |
          echo "Triggering training job in DEV..."
          databricks bundle run training_job -t dev --no-wait
          echo "Training job started in DEV environment"

  # Deploy to STG environment
  deploy-stg:
    name: Deploy to STG
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: success()
    environment:
      name: staging
      url: https://adb-example.cloud.databricks.com
    outputs:
      deployment_status: ${{ steps.deploy.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh

      - name: Configure Databricks CLI
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_STG_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_STG_TOKEN }}
        run: |
          # Create .databrickscfg for authentication
          cat > ~/.databrickscfg << EOF
          [DEFAULT]
          host = ${{ secrets.DATABRICKS_STG_HOST }}
          token = ${{ secrets.DATABRICKS_STG_TOKEN }}
          EOF

          chmod 600 ~/.databrickscfg
          echo "✅ Databricks CLI configured for STG"

      - name: Validate bundle
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_STG_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_STG_TOKEN }}
        run: |
          databricks bundle validate -t stg

      - name: Deploy to STG
        id: deploy
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_STG_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_STG_TOKEN }}
        run: |
          databricks bundle deploy -t stg
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Run integration tests
        run: |
          echo "Running integration tests in STG..."
          pytest tests/integration/ -v --tb=short || true
          echo "Integration tests completed"

      - name: Run full pipeline
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_STG_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_STG_TOKEN }}
        run: |
          echo "Triggering full MLOps pipeline in STG..."
          databricks bundle run full_pipeline_job -t stg --no-wait
          echo "Full pipeline started in STG environment"

  # Deploy to PROD environment
  deploy-prod:
    name: Deploy to PROD
    runs-on: ubuntu-latest
    needs: deploy-stg
    if: success()
    environment:
      name: production
      url: https://adb-example.cloud.databricks.com
    outputs:
      deployment_status: ${{ steps.deploy.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh

      - name: Configure Databricks CLI
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_PROD_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_PROD_TOKEN }}
        run: |
          # Create .databrickscfg for authentication
          cat > ~/.databrickscfg << EOF
          [DEFAULT]
          host = ${{ secrets.DATABRICKS_PROD_HOST }}
          token = ${{ secrets.DATABRICKS_PROD_TOKEN }}
          EOF

          chmod 600 ~/.databrickscfg
          echo "✅ Databricks CLI configured for PROD"

      - name: Validate bundle
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_PROD_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_PROD_TOKEN }}
        run: |
          databricks bundle validate -t prod

      - name: Deploy to PROD
        id: deploy
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_PROD_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_PROD_TOKEN }}
        run: |
          databricks bundle deploy -t prod
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Run smoke tests
        run: |
          echo "Running smoke tests in PROD..."
          pytest tests/integration/ -v -m smoke --tb=short || true
          echo "Smoke tests completed"

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Deployment summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-stg, deploy-prod]
    if: always()
    steps:
      - name: Check deployment statuses
        run: |
          echo "Deployment Summary"
          echo "=================="
          echo "DEV:  ${{ needs.deploy-dev.result }}"
          echo "STG:  ${{ needs.deploy-stg.result }}"
          echo "PROD: ${{ needs.deploy-prod.result }}"

          # Check if any deployment failed
          if [[ "${{ needs.deploy-dev.result }}" == "failure" ]] || \
             [[ "${{ needs.deploy-stg.result }}" == "failure" ]] || \
             [[ "${{ needs.deploy-prod.result }}" == "failure" ]]; then
            echo "One or more deployments failed"
            exit 1
          fi

          echo "All deployments completed successfully"
